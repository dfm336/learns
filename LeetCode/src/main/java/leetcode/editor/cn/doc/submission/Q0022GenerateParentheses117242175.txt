class Solution {
    public List<String> generateParenthesis(int n) {
        if(n == 0)return null;
        List<String> ans = new ArrayList<>();
        String str = "";
        dfs(ans,str,0,0,n );
        return ans;
    }
    
    /**
     *
     * @param ans  返回结果
     * @param str  当前String
     * @param left   已经使用的 （  数量
     * @param right  已经使用的 ） 数量
     */
    private static void dfs(List<String> ans, String str, int left, int right,int n) {
        if(left == n && right == n ){
            ans.add(str);
            return;
        }
        //剪枝
        if(left < right)return;
        if(left < n){
            dfs(ans,str+"(",left+1,right,n);
        }
        if (right < n){
            dfs(ans,str+")",left,right+1,n);
        }
    }
    
}
//runtime:1 ms
//memory:38.4 MB
