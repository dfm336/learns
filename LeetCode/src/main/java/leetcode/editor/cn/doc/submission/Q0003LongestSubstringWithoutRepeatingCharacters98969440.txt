class Solution {
    public int lengthOfLongestSubstring(String str) {
        if(str.length() == 0)return 0;
        HashMap<Character, Integer> map = new HashMap<>();
        Integer max = 0;
        Integer left =0;
        for(int i=0;i<str.length();i++){
            //存在重复值，更新left的位置
            if(map.containsKey(str.charAt(i))){
                //因为下标 从0 开始 所以加1
                left = Math.max(left,map.get(str.charAt(i))+1);
            }
            map.put(str.charAt(i),i);
            max = Math.max(max,i-left+1);
         }
        return max;
    }
}
//runtime:9 ms
//memory:39.2 MB
