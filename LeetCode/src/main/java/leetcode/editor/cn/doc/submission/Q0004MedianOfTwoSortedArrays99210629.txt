class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
               int m = nums1.length ;
        int n = nums2.length ;
        int[] merge = new int[m+n];
        double media = 0;
        if(m==0){
            if(n % 2 == 0){
                return (nums2[(n/2)-1]+nums2[n/2])/2.0;
            }else{
                return nums2[n/2];
            }
        }
        if(n==0){
            if(m % 2 == 0){
                return (nums1[(m/2)-1]+nums1[m/2])/2.0;
            }else{
                return nums1[m/2];
            }
        }
        //合并数组
        int count = 0;
        int i=0;
        int j=0;
        while ( i < m && j < n){
            if(nums1[i] <= nums2[j]){
                merge[count++] = nums1[i++];
            }
            else {//if (nums2[j] < nums1[i])
                merge[count++] = nums2[j++];
            }
        }
        //若右边剩余
        while(j < n){
            merge[count++] = nums2[j++];
        }
        //若左边剩余
        while (i < m){
            merge[count++] = nums1[i++];
        }
        if(count % 2 == 0){
            return (merge[(count/2)-1]+merge[count/2])/2.0;
        }else{
            return merge[count/2];
        }
    }
}
//runtime:2 ms
//memory:39.6 MB
