/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    //输入一个单链表头结点，将该链表反转，返回新的头结点
    public ListNode reverseList(ListNode head) {
//        //base case 只有一个节点，或者 本身为空
//        if (head == null ||  head.next == null){
//            return head;
//        }
//        //下个节点 翻转后
//        ListNode last = reverseList(head.next);
//        head.next.next  = head;
//        head.next = null;
        return reverse(head);
    }

    /**
     * 函数定义： 翻转node 后，返回 翻转后的 起点
     * 输入一个单链表头结点，将该链表反转，返回新的头结点
     * @param node
     * @return
     */
    public ListNode reverse(ListNode node){
        //base case 只有一个节点，或者 本身为空
        if (node == null ||  node.next == null){
            return node;
        }
        //从下个节点 开始翻转后。 根据函数定义： node.next 之后的部分都被翻转了。
        //所以 只要 head.next 的 next 指向 当前节点， 由于当前节点 就是 翻转后的 尾巴，需要 把 尾巴的next = null
        ListNode last = reverse(node.next);
        node.next.next  = node;
        node.next = null;
        return last;
    }


}

//runtime:0 ms
//memory:41.2 MB
