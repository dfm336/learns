/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(m==1 ) return reverseN(head,n);
         // 前进到反转的起点触发 base case
         head.next = reverseBetween(head.next, m - 1, n - 1);
         return head;

    }

    ListNode post = null;

//     // 反转以 head 为起点的 n 个节点，返回新的头结点
// ListNode reverseN(ListNode head, int n) {
//     if (n == 1) { 
//         // 记录第 n + 1 个节点
//         successor = head.next;
//         return head;
//     }
//     // 以 head.next 为起点，需要反转前 n - 1 个节点
//     ListNode last = reverseN(head.next, n - 1);

//     head.next.next = head;
//     // 让反转之后的 head 节点和后面的节点连起来
//     head.next = successor;
//     return last;
// }

    public ListNode reverseN(ListNode head,int n){
        if(n==1){
            post = head.next;
            return  head;
        }
        ListNode node = reverseN(head.next,n-1);
        head.next.next = head;
        head.next = post;
        return node;
    }
}
//runtime:0 ms
//memory:36.2 MB
