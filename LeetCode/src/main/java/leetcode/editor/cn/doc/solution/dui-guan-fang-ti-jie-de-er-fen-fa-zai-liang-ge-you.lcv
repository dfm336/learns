### 解题思路

![IMG_20200203_172442.jpg](https://pic.leetcode-cn.com/92e2261c99f9a3556f61b166acb5e88f60fb7d93d79afef9a0739e447f4eb441-IMG_20200203_172442.jpg)
两个长条表示两个数组，图为刚开始查找时的leftpart和rightpart以及边界的临界值
下面两个为查找i时的两个情况，最上面的是满足找到i的条件，由于i+j等于halflength 所以找到了i那么就找到了j，详细的例外情况在代码注释中写着有
运行结果 3ms 击败98.28%

### 代码

* java

```java
class Solution {
   public double findMedianSortedArrays(int[] nums1, int[] nums2) {
		if (nums1.length > nums2.length) {// 保证m<=n
			int[] temp = nums1;
			nums1 = nums2;
			nums2 = temp;
		}
		int m = nums1.length;
		int n = nums2.length;
		int halflength = (m + n + 1) / 2;// 3 -> 2 6->3
		int imax = m;
		int imin = 0;
		int i = (imax + imin) / 2;
		int j = halflength - i;// i+j=halflength i=0~m j=(m+n)/2-i=(n-m)/2~(m+n)/2
		while (imax >= imin) {// 二分查找找到i j实际=0~n
			if (i > imin && nums2[j] < nums1[i - 1]) {
				// i is too big
				imax = i - 1;
			} else if (i < imax && nums1[i] < nums2[j - 1]) {
				// i is too small
				imin = i + 1;
			} else {
				// i is perfect
				// 奇数
				double maxleft = 0;
				if (i == 0) {// nums1的left为空或者nums1整个为空,即nums1全部元素都大于中位数 这时数组自然会越界
					maxleft = nums2[j - 1];
				} else if (j == 0) {// nums2的left为空，即nums2的全部元素都大于中位数，由于m<=n，这种情况只有在
					// m=n时才会发生
					maxleft = nums1[i - 1];
				} else {
					maxleft = Math.max(nums1[i - 1], nums2[j - 1]);
				}
				if ((m + n) % 2 == 1) {// 奇数
					return maxleft;
				}

				double minright = 0;
				if (i == m) {// 此时num1的全部元素小于中位数或者nums1整个为空，因此minright只能为nums2[j]
					minright = nums2[j];
				} else if (j == n) {// 此时num2的全部元素都小于中位数，显然，只会在m=n时发生
					minright = nums1[i];
				} else {
					minright = Math.min(nums1[i], nums2[j]);
				}
				return (maxleft + minright) / 2;
			}
			// 更新i，j
			i = (imax + imin) / 2;
			j = halflength - i;
		}

		return 0;

	}
}
```

