#### 解题思路：

二叉树 abc，a 是根结点（递归中的 root），bc 是左右子结点（代表其递归后的最优解）。  
最大的路径，可能的路径情况：

* 

```
  a
 / \
b   c
```

1. b + a + c。
2. b + a + a 的父结点。
3. a + c + a 的父结点。

其中情况 1，表示如果不联络父结点的情况，或本身是根结点的情况。  
这种情况是没法递归的，但是结果有可能是全局最大路径和。  
情况 2 和 3，递归时计算 `a+b` 和 `a+c`，选择一个更优的方案返回，也就是上面说的递归后的最优解啦。

另外结点有可能是负值，最大和肯定就要想办法舍弃负值$（max(0, x)）$。  
但是上面 3 种情况，无论哪种，a 作为联络点，都不能够舍弃。

----

代码中使用 val 来记录全局最大路径和。  
`ret` 是情况 2 和 3。  
`lmr` 是情况 1。

所要做的就是递归，递归时记录好全局最大和，返回联络最大和。

#### 代码：

* [-C++]

```C++
int maxPathSum(TreeNode* root, int &val)
{
	if (root == nullptr) return 0;
	int left = maxPathSum(root->left, val);
	int right = maxPathSum(root->right, val);
	int lmr = root->val + max(0, left) + max(0, right);
	int ret = root->val + max(0, max(left, right));
	val = max(val, max(lmr, ret));
	return ret;
}

int maxPathSum(TreeNode* root) 
{
	int val = INT_MIN;
	maxPathSum(root, val);
	return val;
}
```

