题目要求是在第k个节点后面插入第n-k+1个节点，首先想到的就是**使用递归倒序遍历链表**：在递归的返回阶段，我们可以利用执行栈中当前函数的参数节点逆序遍历链表。

所以再设置一个游标变量p用于**正序遍历链表**，配合递归函数返回值（也就是逆序输出的链表节点）sub，一步步把后面的节点插入前面，直到游标变量p或p的后继节点与sub相遇，整个流程终止

*通俗的讲，正序倒序同时开始遍历，期间重排节点，直至两个指针相遇*

* javascript

```javascript
var reorderList = function(head) {
  // traverse函数外部变量用于正序遍历
  let p = head
  function traverse(root) {
    if (root.next === null) return root
    let sub = traverse(root.next)
    // 相遇后流程终止，返回特殊值
    if (sub.val === -1) return sub 
    if (p === sub || p.next === sub) {
      if (p === sub) p.next = null
      else p.next.next = null
      return new ListNode(-1)
    }
    // 开始进入处理环节
    sub.next = p.next
    p.next = sub
    p = sub.next
    // 倒序遍历链表
    return root
  }
  traverse(head)
};

```

草率了，没想到官方题解里面给的那种先找中点再反转合并的做法
