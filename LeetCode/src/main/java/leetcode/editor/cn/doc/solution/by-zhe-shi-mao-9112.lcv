寻找链表中点（偶数中间偏左），反转链表后半部分 `mid->next`，合并链表

* cpp

```cpp
class Solution {
public:
    void reorderList(ListNode* head) {
        if (!head || !head->next) return;

        // 寻找链表中点（偶数中间偏左），对后半段进行统一反转，合并链表
        ListNode* mid = findMiddle(head);
        ListNode* tail = reverse(mid->next);
        mid->next = nullptr;

        merge(head, tail);
    }

private:
    ListNode* findMiddle(ListNode* head) {
        // 偶数结点需要返回中间偏左结点
        ListNode *slow = head, *fast = head->next;
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }

    ListNode* reverse(ListNode *head) {
        ListNode *prev = nullptr;
        while (head) {
            ListNode *tmp = head->next;
            head->next = prev;
            prev = head;
            head = tmp;
        }
        return prev;
    }

    ListNode* merge(ListNode *l1, ListNode *l2) {
        ListNode dummy(0);
        ListNode *p = &dummy;

        while (l1 && l2) {
            p->next = l1;
            l1 = l1->next;
            p = p->next;

            p->next = l2;
            l2 = l2->next;
            p = p->next;
        }

        if (l1) p->next = l1;
        if (l2) p->next = l2;

        return dummy.next;
    }
};
```

