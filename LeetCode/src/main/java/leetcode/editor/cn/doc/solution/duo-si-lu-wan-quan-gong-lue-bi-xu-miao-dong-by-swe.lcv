#### 旋转排序数组中找目标值

---

#### 思路一：将 「旋转数组查找目标值」 转化成 「有序数组查找目标值」

- 

  #### 方法一：最简单的做法, 先找到最值将旋转数组分成两段有序数组，接下来在有序数组中找目标值就轻车熟路了。

  * 先找到 「[153. 寻找旋转排序数组中的最小值](https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/)」的索引，由此可以将数组分为升序的两段。
  * 根据 `nums[0]` 与 `target` 的关系判断 `target` 在左段还是右段，再对升序数组进行二分查找即可。
  同样的思路可以解决「[1095. 山脉数组中查找目标值](https://leetcode-cn.com/problems/find-in-mountain-array/)」，即先找到山脉数组的峰顶「[852. 山脉数组的峰顶索引](https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/)」, 通过峰顶将山脉数组分为两段有序的数组，接下来就可以在有序数组中查找目标值了。

  代码比较简单就不贴了。

- 

  #### 方法二：在 [英文版](https://leetcode.com/problems/search-in-rotated-sorted-array/discuss/14435/Clever-idea-making-it-simple) 看到了一个有意思的思路。

  对于旋转数组 `nums = [4,5,6,7,0,1,2]`
  首先根据 `nums[0]` 与 `target` 的关系判断 `target` 是在左段还是右段。
  - 例如 `target = 5`, 目标值在左半段，因此在 `[4, 5, 6, 7, inf, inf, inf]` 这个有序数组里找就行了；
  - 例如 `target = 1`, 目标值在右半段，因此在 `[-inf, -inf, -inf, -inf, 0, 1, 2]` 这个有序数组里找就行了。

  如此，我们又双叒叕将「旋转数组中找目标值」 转化成了 「有序数组中找目标值」

  * []

  ```Java
  class Solution {
      public int search(int[] nums, int target) {
          int lo = 0, hi = nums.length - 1;
          while (lo <= hi) {
              int mid = lo + (hi - lo) / 2;
              if (nums[mid] == target) {
                  return mid;
              }

              // 先根据 nums[0] 与 target 的关系判断目标值是在左半段还是右半段
              if (target >= nums[0]) {
                  // 目标值在左半段时，若 mid 在右半段，则将 mid 索引的值改成 inf
                  if (nums[mid] < nums[0]) {
                      nums[mid] = Integer.MAX_VALUE;
                  }
              } else {
                  // 目标值在右半段时，若 mid 在左半段，则将 mid 索引的值改成 -inf
                  if (nums[mid] >= nums[0]) {
                      nums[mid] = Integer.MIN_VALUE;
                  }
              }

              if (nums[mid] < target) {
                  lo = mid + 1;
              } else {
                  hi = mid - 1;
              }
          }
          return -1;
      }
  }
  ```

#### 思路二：直接对旋转数组进行二分查找。

首先复习一下有序数组的二分查找：

* []

```Java
public int search(int[] nums, int target) {
    int lo = 0, hi = nums.length - 1, mid = 0;
    while (lo <= hi) {
        mid = lo + ((hi - lo) >> 1);
        if (nums[mid] == target) {
            return mid;
        }
        if (nums[mid] < target) {
            lo = mid + 1;
        } else {
            hi = mid - 1;
        }
    }
    return -1;
}
```

如上述代码所示，我们根据 `nums[mid]` 与 `target` 的大小关系，可以得知 `target` 是在 `mid` 的左边还是右边，从而来调整左右边界 `lo` 和 `hi`。

但是，对于旋转数组，我们无法直接根据 `nums[mid]` 与 `target` 的大小关系来判断 `target` 是在 `mid` 的左边还是右边，因此需要「分段讨论」。于是方法三呼之欲出！

- 

  #### 方法三：先根据 `nums[mid]` 与 `nums[lo]` 的关系判断 `mid` 是在左段还是右段，接下来再判断 `target` 是在 `mid` 的左边还是右边，从而来调整左右边界 `lo` 和 `hi`。

  * []

  ```Java
  public int search(int[] nums, int target) {
      int lo = 0, hi = nums.length - 1, mid = 0;
      while (lo <= hi) {
          mid = lo + (hi - lo) / 2;
          if (nums[mid] == target) {
              return mid;
          }
          // 先根据 nums[mid] 与 nums[lo] 的关系判断 mid 是在左段还是右段 
          if (nums[mid] >= nums[lo]) {
              // 再判断 target 是在 mid 的左边还是右边，从而调整左右边界 lo 和 hi
              if (target >= nums[lo] && target < nums[mid]) {
                  hi = mid - 1;
              } else {
                  lo = mid + 1;
              }
          } else {
              if (target > nums[mid] && target <= nums[hi]) {
                  lo = mid + 1;
              } else {
                  hi = mid - 1;
              }
          }
      }
      return -1;
  }
  ```

❤️ 大佬们随手【[关注我](https://leetcode-cn.com/u/sweetiee/)】。
